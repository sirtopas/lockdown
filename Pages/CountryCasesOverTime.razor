@page "/CountryCasesOverTime"
@inject HttpClient HttpClient
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@inject IJSRuntime JsRuntime

<h2>Deaths over Time by Country</h2>

<ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="600" Height="300" />

@code
{
    private IEnumerable<Model.CountryCasesPerDay> _countryDataOverTime;
    LineConfig _lineConfig;
    ChartJsLineChart _lineChartJs;
    LineDataset<TimeTuple<int>> _tempDataSet;

    protected override async Task OnInitializedAsync()
    {
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new ChartJs.Blazor.ChartJS.Common.Handlers.Legend
                {
                    Position = Position.Right
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                {
                    new TimeAxis
                {
                    Distribution = TimeDistribution.Linear,
                    Ticks = new TimeTicks
                    {
                        Source = TickSource.Data
                    },
                    Time = new TimeOptions
                    {
                        Unit = TimeMeasurement.Day,
                        Round = TimeMeasurement.Millisecond,
                        TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                        DisplayFormats = TimeDisplayFormats.DE_CH
                    },
                    ScaleLabel = new ScaleLabel
                    {
                    LabelString = "Time"
                    }
                }
            }
                }
            }
        };

        _tempDataSet = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Label = "Cases over time",
            Fill = true,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };
        var url = "country/united-kingdom/status/deaths";
        _countryDataOverTime = await HttpClient.GetFromJsonAsync<IEnumerable<Model.CountryCasesPerDay>>(url);
        _countryDataOverTime = _countryDataOverTime.Where(c => c.Province == "");
        _tempDataSet.AddRange(_countryDataOverTime.Select(p => new TimeTuple<int>(new Moment(p.Date), p.Cases)));
        _lineConfig.Data.Datasets.Add(_tempDataSet);
    }
}