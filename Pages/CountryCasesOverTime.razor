@page "/CountryCasesOverTime"
@inject HttpClient HttpClient
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@inject IJSRuntime JsRuntime

<h2>Deaths over Time by Country</h2>

@if(_countries != null)
{
    <label class="p-3">Selected Country: @_countryName</label>
    <select class="form-control" @bind="_countryProperty">
        @foreach (var country in _countries.OrderBy(c => c.Country))
        {
            <option value="@country.Slug">@country.Country</option>
        }
    </select>
}
<ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="600" Height="300" />

@code
{
    private IEnumerable<Model.CountryCasesPerDay> _countryDataOverTime;
    private IEnumerable<Model.CountryDataItem> _countries;
    private string _countryName = "united-kingdom";
    private string _countryProperty
    {
        get { return _countryName; }
        set
        {
            _countryName = value;
            CountryChanged();
        }
    }
    LineConfig _lineConfig;
    ChartJsLineChart _lineChartJs;
    LineDataset<TimeTuple<int>> _tempDataSet;

    protected override async Task OnInitializedAsync()
    {
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new ChartJs.Blazor.ChartJS.Common.Handlers.Legend
                {
                    Position = Position.Right
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Millisecond,
                                TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            Ticks = new TimeTicks
                            {
                                
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            }
                        }
                    }
                }
            }
        };

        _tempDataSet = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Label = "Cases over time",
            Fill = true,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };

        var url = $"country/{_countryName}/status/deaths";
        _countryDataOverTime = await HttpClient.GetFromJsonAsync<IEnumerable<Model.CountryCasesPerDay>>(url);
        _countries = await HttpClient.GetFromJsonAsync<IEnumerable<Model.CountryDataItem>>("countries");
        _tempDataSet.AddRange(_countryDataOverTime.Where(c => c.Province == "").Select(p => new TimeTuple<int>(new Moment(p.Date), p.Cases)));
        _lineConfig.Data.Datasets.Add(_tempDataSet);
    }

    private async void CountryChanged()
    {
        var url = $"country/{_countryName}/status/deaths";
        _tempDataSet.RemoveAll(c => c.Time != null);
        _countryDataOverTime = await HttpClient.GetFromJsonAsync<IEnumerable<Model.CountryCasesPerDay>>(url);
        _tempDataSet.AddRange(_countryDataOverTime.Where(c => c.Province == "").Select(p => new TimeTuple<int>(new Moment(p.Date), p.Cases)));
        _lineConfig.Data.Datasets.Add(_tempDataSet);
        await _lineChartJs.Update();
    }
}