@page "/"
@inject HttpClient HttpClient
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.Util

<div class="test-center">
    <h1>Lockdown</h1>
    <small>A small app used to display Covid-19 data</small>
</div>

<div class="text-center">
    <div class="p-2">
        <input class="form-control form-control-lg w-50 mx-auto mt-4" placeholder="Country Name" />
    </div>
    <div class="p-2">
        <button class="btn btn-primary btn-lg" @onclick="GetSummaryData">Get Summary Data</button>
    </div>
</div>

@if (_summaryData != null)
{
    <ChartJsBarChart @ref="_barChartJs" Config="@_config" Width="600" Height="300" />
    <Bubble SummaryData="@_summaryData"></Bubble>
    <div class="text-center">
        <div class="p-2">
            <button class="btn btn-primary btn-lg" @onclick="OrderByTotalDeaths">Order by Total Deaths</button>
            <button class="btn btn-primary btn-lg" @onclick="OrderByCountry">Order by Country</button>
        </div>
        <p>Data Date: @_summaryData.Date</p>
    </div>

    <p class="text-center">@_summaryData.Global.NewDeaths</p>

    <div class="container">
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3">
            @foreach (var country in _summaryData.Countries)
            {
            <div class="col-4 mb-4">
                <div class="card h-100">
                    <div class="card-header">
                        @country.Country
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">
                                New: @country.NewDeaths
                            </li>
                            <li class="list-group-item">
                                Total: @country.TotalDeaths
                            </li>
                            <li class="list-group-item">Vestibulum at eros</li>
                        </ul>
                    </div>
                </div>
            </div>
            }
        </div>
    </div>
}

@code
{
    private Model.SummaryData _summaryData;

    private async Task GetSummaryData()
    {
        var url = "summary";
        _summaryData = await HttpClient.GetFromJsonAsync<Model.SummaryData>(url);
        GenerateBarChart();
    }

    private void OrderByTotalDeaths()
    {
        _summaryData.Countries = _summaryData.Countries.OrderByDescending(c => c.TotalDeaths);
    }

    private void OrderByCountry()
    {
        _summaryData.Countries = _summaryData.Countries.OrderBy(c => c.Country);
    }

    private BarConfig _config;
    private ChartJsBarChart _barChartJs;
    private void GenerateBarChart()
    {
        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Stats per Country"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
    {
    new BarCategoryAxis
    {
    BarThickness = BarThickness.Flex,
    Stacked = true
    }
    }
                },
                Responsive = true
            }
        };

        var countryData = _summaryData.Countries.OrderByDescending(c => c.TotalConfirmed).Take(10).ToList();
        countryData.ForEach(c => _config.Data.Labels.Add(c.Country));
        var totalCases = new BarDataset<DoubleWrapper>()
        {
            Label = "Total Cases",
            BackgroundColor = "blue"
        };
        var totalDeaths = new BarDataset<DoubleWrapper>()
        {
            Label = "Total Deaths",
            BackgroundColor = "red"
        };

        foreach (var data in countryData)
        {
            totalCases.Add(data.TotalConfirmed);
            totalDeaths.Add(data.TotalDeaths);
        }

        _config.Data.Datasets.Add(totalDeaths);
        _config.Data.Datasets.Add(totalCases);
    }
}